# tests/test_calculator.py

import pytest
from calculator.commands import AddCommand, SubtractCommand, MultiplyCommand, DivideCommand
from calculator.plugins.mod_command import ModCommand

# Test AddCommand using the fake_data fixture
def test_add_command(fake_data):
    a, b = fake_data  # Get the random numbers from Faker
    cmd = AddCommand()
    assert cmd.execute(a, b) == a + b

# Test SubtractCommand using the fake_data fixture
def test_subtract_command(fake_data):
    a, b = fake_data  # Get the random numbers from Faker
    cmd = SubtractCommand()
    assert cmd.execute(a, b) == a - b

# Test MultiplyCommand using the fake_data fixture
def test_multiply_command(fake_data):
    a, b = fake_data  # Get the random numbers from Faker
    cmd = MultiplyCommand()
    assert cmd.execute(a, b) == a * b

# Test DivideCommand using the fake_data fixture
def test_divide_command(fake_data):
    a, b = fake_data  # Get the random numbers from Faker
    cmd = DivideCommand()
    if b == 0:
        with pytest.raises(ZeroDivisionError):
            cmd.execute(a, b)
    else:
        assert cmd.execute(a, b) == a / b

# Test ModCommand (plugin command) using the fake_data fixture
def test_mod_command(fake_data):
    a, b = fake_data  # Get the random numbers from Faker
    cmd = ModCommand()
    if b == 0:
        with pytest.raises(ZeroDivisionError):
            cmd.execute(a, b)
    else:
        assert cmd.execute(a, b) == a % b

# Test multiple cases dynamically based on the --num_records option
def test_generated_cases(generate_test_cases):
    cmd = AddCommand()  # Example: testing addition
    for a, b in generate_test_cases:  # Get the test cases generated by Faker
        assert cmd.execute(a, b) == a + b
